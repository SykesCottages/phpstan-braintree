<?php

namespace Braintree;

use Braintree\Result\Successful;
use InvalidArgumentException;

class CustomerGateway
{
    public function __construct($gateway)
    {
    }

    public function all()
    {
    }

    public function fetch($query, $ids)
    {
    }

    /**
     * @param array $attribs
     * @return Result\Successful|Result\Error
     */
    public function create($attribs = [])
    {
    }

    /**
     * @param array $attribs
     * @return Customer
     * @throws Exception\ValidationError
     */
    public function createNoValidate($attribs = [])
    {
    }

    /**
     * @return array gateway create request format
     */
    public static function createSignature()
    {
    }

    /**
     * @return array update request format
     */
    public static function updateSignature()
    {
    }


    /**
     * @param string id customer Id
     * @param string $associationFilterId associationFilterId association filter Id
     * @return Customer|boolean The customer object or false if the request fails.
     * @throws Exception\NotFound
     */
    public function find($id, $associationFilterId = null)
    {
    }

    /**
     * @param int $customerId
     * @param array $transactionAttribs
     * @return Result\Successful|Result\Error
     */
    public function credit($customerId, $transactionAttribs)
    {
    }

    /**
     * @param int $customerId
     * @param array $transactionAttribs
     * @return Transaction
     * @throws Exception\ValidationError
     */
    public function creditNoValidate($customerId, $transactionAttribs)
    {
    }

    /**
     * @param string $customerId
     * @return Successful
     */
    public function delete($customerId)
    {
    }

    /**
     * @param string $customerId
     * @param array $transactionAttribs
     * @return Result\Successful|Result\Error
     * @see Transaction::sale()
     */
    public function sale($customerId, $transactionAttribs)
    {
    }

    /**
     * @param string $customerId
     * @param array $transactionAttribs
     * @return Transaction
     * @throws Exception\ValidationsFailed
     * @see Transaction::sale()
     */
    public function saleNoValidate($customerId, $transactionAttribs)
    {
    }

    /**
     * @param mixed $query search query
     * @return ResourceCollection
     * @throws InvalidArgumentException
     */
    public function search($query)
    {
    }

    /**
     * @param string $customerId (optional)
     * @param array $attributes
     * @return Result\Successful|Result\Error
     */
    public function update($customerId, $attributes)
    {
    }

    /**
     * @param string $customerId
     * @param array $attributes
     * @return Customer
     * @throws Exception\ValidationsFailed
     */
    public function updateNoValidate($customerId, $attributes)
    {
    }

    /**
     * @access protected
     * @param array $customerAttribs array of customer data
     * @return void
     */
    protected function _initialize($customerAttribs)
    {
    }

    /**
     * @return string
     */
    public function __toString()
    {
    }

    /**
     * @param object $otherCust customer to compare against
     * @return boolean
     */
    public function isEqual($otherCust)
    {
    }

    /**
     * @return array
     */
    public function paymentMethods()
    {
    }

    /**
     * @return CreditCard|PayPalAccount|ApplePayCard|GooglePayCard
     */
    public function defaultPaymentMethod()
    {
    }

    public static function _defaultPaymentMethodFilter($paymentMethod)
    {
    }

    /**
     * @param string $subPath
     * @param array $params
     * @return mixed
     */
    public function _doCreate($subPath, $params)
    {
    }

    /**
     * @param string customer id
     * @throws InvalidArgumentException
     */
    private function _validateId($id = null)
    {
    }



    /**
     * @param string $subPath
     * @param array $params
     * @return mixed
     */
    private function _doUpdate($httpVerb, $subPath, $params)
    {
    }

    /**
     * @param array $response gateway response values
     * @return Result\Successful|Result\Error
     * @throws Exception\Unexpected
     */
    private function _verifyGatewayResponse($response)
    {
    }
}
