<?php

namespace Braintree;

use Countable;
use IteratorAggregate;
use ArrayAccess;
use OutOfRangeException;
use ArrayIterator;

class Collection implements Countable, IteratorAggregate, ArrayAccess
{
    /**
     * @var array collection storage
     */
    protected $_collection = [];

    /**
     * @param string $value
     */
    public function add($value)
    {
        $this->_collection[] = $value;
    }

    /**
     * @param integer $index
     * @param mixed $value
     * @throws OutOfRangeException
     */
    public function set($index, $value)
    {
    }

    /**
     * @param integer $index index to remove
     * @throws OutOfRangeException if index is out of range
     */
    public function remove($index)
    {
    }

    /**
     * @param integer $index
     * @return mixed
     * @throws OutOfRangeException
     */
    public function get($index)
    {
    }

    /**
     * @param integer $index
     * @return boolean
     */
    public function exists($index)
    {
    }
    
    /**
     * @return integer
     */
    public function count()
    {
    }


    /**
     * @return ArrayIterator
     */
    public function getIterator()
    {
    }

    /**
     * @see set
     * @param integer $offset
     * @param mixed $value
     */
    public function offsetSet($offset, $value)
    {
    }

    /**
     * @see remove
     * @param integer $offset
     */
    public function offsetUnset($offset)
    {
    }

    /**
     * @see get
     * @param integer $offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
    }

    /**
     * @see exists
     * @param integer $offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
    }
}
