<?php

namespace Braintree;

use DateTime;

/**
 * Braintree Address module
 * Creates and manages Braintree Addresses
 *
 * An Address belongs to a Customer. It can be associated to a
 * CreditCard as the billing address. It can also be used
 * as the shipping address when creating a Transaction.
 *
 * @package   Braintree
 *
 * @property-read string $company
 * @property-read string $countryName
 * @property-read DateTime $createdAt
 * @property-read string $customerId
 * @property-read string $extendedAddress
 * @property-read string $firstName
 * @property-read string $id
 * @property-read string $lastName
 * @property-read string $locality
 * @property-read string $phoneNumber
 * @property-read string $postalCode
 * @property-read string $region
 * @property-read string $streetAddress
 * @property-read DateTime $updatedAt
 */
class Address extends Base
{
    /**
     * @param object $other address to compare against
     * @return boolean
     */
    public function isEqual($other)
    {
    }

    /**
     * @ignore
     * @return string
     */
    public function __toString()
    {
    }

    /**
     * @ignore
     * @access protected
     * @param array $addressAttribs array of address data
     * @return void
     */
    protected function _initialize($addressAttribs)
    {
    }

    /**
     * @ignore
     * @return Address
     */
    public static function factory($attributes)
    {
    }


    // static methods redirecting to gateway

    /**
     * @param array $attribs
     * @return Address
     */
    public static function create($attribs)
    {
    }

    /**
     * @param array $attribs
     * @return Address
     */
    public static function createNoValidate($attribs)
    {
    }

    /**
     * @param Customer|int $customerOrId
     * @param int $addressId
     * @throws InvalidArgumentException
     * @return Result\Successful
     */
    public static function delete($customerOrId = null, $addressId = null)
    {
    }

    /**
     * @param Customer|int $customerOrId
     * @param int $addressId
     * @throws Exception\NotFound
     * @return Address
     */
    public static function find($customerOrId, $addressId)
    {
    }

    /**
     * @param Customer|int $customerOrId
     * @param int $addressId
     * @param array $attributes
     * @throws Exception\Unexpected
     * @return Result\Successful|Result\Error
     */
    public static function update($customerOrId, $addressId, $attributes)
    {
    }

    public static function updateNoValidate($customerOrId, $addressId, $attributes)
    {
    }
}
